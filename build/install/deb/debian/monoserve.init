#!/bin/sh

### BEGIN INIT INFO
# Provides: monoserve
# Required-Start: $local_fs $syslog $remote_fs mysql
# Required-Stop: $local_fs $syslog $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start FastCGI Mono server with hosts
### END INIT INFO

. /lib/lsb/init-functions

NAME=monoserve
PROGRAM=hyperfastcgi4
DAEMON=$(which $PROGRAM)
USER=EKTAIOFFICE
GROUP=$USER
LOCKFILE=/tmp/$NAME
PID=""
LOGFILE=/var/log/EKTAIOFFICE/$NAME.log
ARGS="/logfile=$LOGFILE /config=/etc/hyperfastcgi/EKTAIOFFICE /loglevels=All"

do_start() {
	echo -n "Starting $NAME... "
	export MONO_IOMAP=all
	export MONO_ASPNET_WEBCONFIG_CACHESIZE=2000
	export MONO_THREADS_PER_CPU=2000
	export MONO_GC_PARAMS=nursery-size=64m
	export MONO_THREADS_SUSPEND=preemptive
    export MONO_LOG_LEVEL="info"

	test -e /var/run/EKTAIOFFICE || install -m 755 -o EKTAIOFFICE -g www-data -d /var/run/EKTAIOFFICE
	[ -e /var/run/EKTAIOFFICE/EKTAIOFFICE.socket ] && rm -f /var/run/EKTAIOFFICE/EKTAIOFFICE.socket
	start-stop-daemon -m -p $LOCKFILE -S -c $USER:$GROUP -x $DAEMON -- $ARGS </dev/null >$LOGFILE 2>&1 &
	echo "OK"
}

do_stop() {
        echo -n "Stopping $NAME... "
		
		# Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $LOCKFILE
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        
		# Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.		
	    get_pid
		
		if [ -n "$PID" ]; then
			kill -9 $PID
		fi
    	
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $LOCKFILE
        return "$RETVAL"
        echo "OK"
}


get_pid() {
	PID=$(ps auxf | grep HyperFastCgi.exe | grep $NAME.log | grep -v grep | awk '{print $2}')
}

case "$1" in
	start)
		get_pid
		if [ -z "$PID" ]; then
			rm -f "$LOCKFILE"
			do_start
		fi
	;;

	stop)
		get_pid
		if [ -n "$PID" ]; then
			do_stop
			rm -f "$LOCKFILE"
		fi
	;;

	status)
		get_pid
		if [ -z "$PID" ]; then
			echo "$NAME is not running"
		else
			echo "$NAME is running (pid $PID)"
		fi
	;;

	restart|force-reload)
		get_pid
		[ -n "$PID" ] && do_stop
		rm -f "$LOCKFILE"
#		sleep 2
		do_start
	;;

	*)
		echo $"Usage: $0 {start|stop|status|restart|force-reload}"
	;;
esac

exit 0
