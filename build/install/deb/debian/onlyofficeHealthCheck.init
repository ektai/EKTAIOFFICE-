#!/bin/sh

### BEGIN INIT INFO
# Provides: EKTAIOFFICEHealthCheck
# Required-Start: $local_fs $syslog $remote_fs mysql
# Required-Stop: $local_fs $syslog $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start EKTAIOFFICE HealthCheck Service
### END INIT INFO

. /lib/lsb/init-functions

NAME=$(basename $0)
PROGRAM=mono-service
DAEMON=$(which $PROGRAM)
USER=EKTAIOFFICE
GROUP=EKTAIOFFICE
LOCKFILE=/tmp/$NAME
PID=""

DIR=/var/www/EKTAIOFFICE/Services/TeamLabSvc
EXEC=TeamLabSvc.exe
ARGS="-d:$DIR -l:$LOCKFILE $DIR/$EXEC --service \"ASC.HealthCheck.Infrastructure.HealthCheckLauncher,ASC.HealthCheck\" --log HealthCheck"


do_start() {
	echo -n "Starting $NAME... "
	export MONO_IOMAP=all
	
	start-stop-daemon -S -c $USER:$GROUP -x $DAEMON -- $ARGS
	echo "OK"
}

do_stop() {
	echo -n "Stopping $NAME... "
	kill $PID
	echo "OK"
}

get_pid() {
	PID=$(ps auxf | grep $PROGRAM.exe | grep $NAME | awk '{print $2}')
}


case "$1" in
	start)
		get_pid
		if [ -z "$PID" ]; then
			rm -f "$LOCKFILE"
			do_start
		else
			echo "$NAME is running (pid $PID)"
		fi
	;;

	stop)
		get_pid
		if [ -n "$PID" ]; then
			do_stop
			rm -f "$LOCKFILE"
		else
			echo "$NAME is not running"
		fi
	;;

	status)
		get_pid
		if [ -z "$PID" ]; then
			echo "$NAME is not running"
		else
			echo "$NAME is running (pid $PID)"
		fi
	;;

	restart|force-reload)
		get_pid
		if [ -n "$PID" ]; then
			do_stop
		fi
		rm -f "$LOCKFILE"
#		sleep 5
		do_start
	;;

	*)
		echo $"Usage: $0 {start|stop|status|restart|force-reload}"
	;;
esac

exit 0
