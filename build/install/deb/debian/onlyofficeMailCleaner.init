#!/bin/sh

### BEGIN INIT INFO
# Provides: EKTAIOFFICEMailStorageCleaner
# Required-Start: $local_fs $syslog $remote_fs mysql
# Required-Stop: $local_fs $syslog $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start EKTAIOFFICE MailCleaner Service
### END INIT INFO

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

NAME=$(basename $0)
PROGRAM=mono-service
DAEMON=$(which $PROGRAM)
USER=EKTAIOFFICE
GROUP=EKTAIOFFICE
LOCKFILE=/tmp/$NAME
PID=""

DIR=/var/www/EKTAIOFFICE/Services/MailCleaner
EXEC=ASC.Mail.StorageCleaner.exe
ARGS="-d:$DIR -l:$LOCKFILE $DIR/$EXEC"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

do_start() {
        echo -n "Starting $NAME... "
        export MONO_IOMAP=all
        start-stop-daemon -S -c $USER:$GROUP -x $DAEMON -- $ARGS
        echo "OK"
}

do_stop() {
        echo -n "Stopping $NAME... "
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $LOCKFILE
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2
        start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5  --pidfile $LOCKFILE
        [ "$?" = 2 ] && return 2
        # Many daemons don't delete their pidfiles when they exit.
        # killall -9 $NAME
        rm -f $LOCKFILE
        return "$RETVAL"
        echo "OK"
}

get_pid() {
        PID=$(ps auxf | grep $PROGRAM.exe | grep $NAME | awk '{print $2}')
}


case "$1" in
        start)
                get_pid
                if [ -z "$PID" ]; then
                        rm -f "$LOCKFILE"
                        do_start
                else
                        echo "$NAME is running (pid $PID)"
                fi
        ;;

        stop)
                get_pid
                if [ -n "$PID" ]; then
                        do_stop
                        rm -f "$LOCKFILE"
                else
                        echo "$NAME is not running"
                fi
        ;;

        status)
                get_pid
                if [ -z "$PID" ]; then
                        echo "$NAME is not running"
                else
                        echo "$NAME is running (pid $PID)"
                fi
        ;;

        restart|force-reload)
                get_pid
                if [ -n "$PID" ]; then
                        do_stop
                fi
                rm -f "$LOCKFILE"
#                sleep 5
                do_start
        ;;

        *)
                echo $"Usage: $0 {start|stop|status|restart|force-reload}"
        ;;
esac

exit 0
