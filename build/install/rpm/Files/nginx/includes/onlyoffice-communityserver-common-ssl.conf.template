upstream fastcgi_backend_apisystem {
        server unix:/var/run/EKTAIOFFICE/EKTAIOFFICEApiSystem.socket;
        keepalive 32;
}

upstream fastcgi_backend {
	server unix:/var/run/EKTAIOFFICE/EKTAIOFFICE.socket;
	keepalive {{APP_NIGNX_KEEPLIVE}};
}

fastcgi_cache_path /var/cache/nginx/EKTAIOFFICE
	levels=1:2
	keys_zone=EKTAIOFFICE:256m
	max_size=1024m
	inactive=1d;

geo $ip_external {
     default 1;
     {{DOCKER_APP_SUBNET}} 0;
     127.0.0.1 0;
}

map $http_host $this_host {
  "" $host;
  default $http_host;
}

map $http_x_forwarded_proto $the_scheme {
  default $http_x_forwarded_proto;
  "" $scheme;
}

map $http_x_forwarded_host $the_host {
  default $http_x_forwarded_host;
  "" $this_host;
}

## Normal HTTP host
server {
	listen 0.0.0.0:80 default_server;
	listen [::]:80;
	server_name _;
	server_tokens off;

        root /nowhere; ## root doesn't have to be a valid path since we are redirecting

        location / {
	        if ($ip_external) {
	                ## Redirects all traffic to the HTTPS host
      		         rewrite ^ https://$host$request_uri? permanent;
                }


                client_max_body_size 100m;

                proxy_pass https://127.0.0.1;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Host $server_name;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_ssl_verify off;
        }
}

## HTTPS host
server {
	listen 0.0.0.0:443 ssl default_server;
	listen [::]:443 ssl;
	server_tokens off;
	root /usr/share/nginx/html;

	## Increase this if you want to upload large attachments
	client_max_body_size 100m;

	## Strong SSL Security
	## https://cipherli.st/	
	ssl_certificate {{SSL_CERTIFICATE_PATH}};
	ssl_certificate_key {{SSL_KEY_PATH}};
	ssl_verify_client {{SSL_VERIFY_CLIENT}};
	ssl_client_certificate {{CA_CERTIFICATES_PATH}};

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
	ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off; # Requires nginx >= 1.5.9

	add_header Strict-Transport-Security "max-age={{APP_HTTPS_HSTS_MAXAGE}}; includeSubDomains; preload" always;
#	add_header X-Frame-Options DENY;
	add_header X-Content-Type-Options nosniff;
	add_header Access-Control-Allow-Origin *;	

	## [Optional] If your certficate has OCSP, enable OCSP stapling to reduce the overhead and latency of running SSL.
	## Replace with your ssl_trusted_certificate. For more info see:
	## - https://medium.com/devops-programming/4445f4862461
	## - https://www.ruby-forum.com/topic/4419319
	## - https://www.digitalocean.com/community/tutorials/how-to-configure-ocsp-stapling-on-apache-and-nginx
	ssl_stapling on;
	ssl_stapling_verify on;
	ssl_trusted_certificate {{SSL_OCSP_CERTIFICATE_PATH}};
	resolver 8.8.8.8 8.8.4.4 127.0.0.11 valid=300s; # Can change to your DNS resolver if desired
	resolver_timeout 10s;

	## [Optional] Generate a stronger DHE parameter:
	## cd /etc/ssl/certs
	## sudo openssl dhparam -out dhparam.pem 4096
	##
	ssl_dhparam {{SSL_DHPARAM_PATH}};

	large_client_header_buffers 4 16k;

        set $X_REWRITER_URL $the_scheme://$the_host;

        if ($http_x_rewriter_url != '') {
                set $X_REWRITER_URL $http_x_rewriter_url ;
        }


        include /etc/nginx/includes/EKTAIOFFICE-communityserver-*.conf;
}



