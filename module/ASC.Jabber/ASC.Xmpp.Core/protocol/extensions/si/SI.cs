/*
 *
 * (c) Copyright Ascensio System Limited 2010-2020
 *
 * This program is freeware. You can redistribute it and/or modify it under the terms of the GNU 
 * General Public License (GPL) version 3 as published by the Free Software Foundation (https://www.gnu.org/copyleft/gpl.html). 
 * In accordance with Section 7(a) of the GNU GPL its Section 15 shall be amended to the effect that 
 * Ascensio System SIA expressly excludes the warranty of non-infringement of any third-party rights.
 *
 * THIS PROGRAM IS DISTRIBUTED WITHOUT ANY WARRANTY; WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE. For more details, see GNU GPL at https://www.gnu.org/copyleft/gpl.html
 *
 * You can contact Ascensio System SIA by email at sales@EKTAIOFFICE.com
 *
 * The interactive user interfaces in modified source and object code versions of EKTAIOFFICE must display 
 * Appropriate Legal Notices, as required under Section 5 of the GNU GPL version 3.
 *
 * Pursuant to Section 7 ยง 3(b) of the GNU GPL you must retain the original EKTAIOFFICE logo which contains 
 * relevant author attributions when distributing the software. If the display of the logo in its graphic 
 * form is not reasonably feasible for technical reasons, you must include the words "Powered by EKTAIOFFICE" 
 * in every copy of the program you distribute. 
 * Pursuant to Section 7 ยง 3(e) we decline to grant you any rights under trademark law for use of our trademarks.
 *
*/


using ASC.Xmpp.Core.protocol.extensions.featureneg;
using ASC.Xmpp.Core.protocol.extensions.filetransfer;
using ASC.Xmpp.Core.utils.Xml.Dom;

namespace ASC.Xmpp.Core.protocol.extensions.si
{
    /// <summary>
    ///   JEP-0095: Stream Initiation. This JEP defines a protocol for initiating a stream (with meta information) between any two Jabber entities.
    /// </summary>
    public class SI : Element
    {
        public SI()
        {
            TagName = "si";
            Namespace = Uri.SI;
        }

        //id='a0'
        //mime-type='text/plain'

        /// <summary>
        ///   The "id" attribute is an opaque identifier. This attribute MUST be present on type='set', and MUST be a valid string. This SHOULD NOT be sent back on type='result', since the &lt;iq/&gt; "id" attribute provides the only context needed. This value is generated by the Sender, and the same value MUST be used throughout a session when talking to the Receiver.
        /// </summary>
        public string Id
        {
            get { return GetAttribute("id"); }
            set { SetAttribute("id", value); }
        }

        /// <summary>
        ///   The "mime-type" attribute identifies the MIME-type for the data across the stream. This attribute MUST be a valid MIME-type as registered with the Internet Assigned Numbers Authority (IANA) [3] (specifically, as listed at "http://www.iana.org/assignments/media-types"). During negotiation, this attribute SHOULD be present, and is otherwise not required. If not included during negotiation, its value is assumed to be "binary/octect-stream".
        /// </summary>
        public string MimeType
        {
            get { return GetAttribute("mime-type"); }
            set { SetAttribute("mime-type", value); }
        }

        /// <summary>
        ///   The "profile" attribute defines the SI profile in use. This value MUST be present during negotiation, and is the namespace of the profile to use.
        /// </summary>
        public string Profile
        {
            get { return GetAttribute("profile"); }
            set { SetAttribute("profile", value); }
        }


        /// <summary>
        ///   the FeatureNeg Element
        /// </summary>
        public FeatureNeg FeatureNeg
        {
            get { return SelectSingleElement(typeof (FeatureNeg)) as FeatureNeg; }
            set
            {
                if (HasTag(typeof (FeatureNeg)))
                    RemoveTag(typeof (FeatureNeg));

                if (value != null)
                    AddChild(value);
            }
        }

        /// <summary>
        ///   the File Element
        /// </summary>
        public File File
        {
            get { return SelectSingleElement(typeof (File)) as File; }
            set
            {
                if (HasTag(typeof (File)))
                    RemoveTag(typeof (File));

                if (value != null)
                    AddChild(value);
            }
        }
    }
}